lvalue vs rvalue

ref: http://thbecker.net/articles/rvalue_references/section_01.html

lvalue could be at both left and right side of assignment operator(=) but rvalue could only be at right side
lvalue's address can be access via & operator, otherwise it's rvalue
a declared rvalue could be both lvalue and rvalue. If it has a name, it's a lvalue, otherwise rvalue.
   ex:
   void foo(X && x) {
       X obj = x; // calling X(const X &rhs) - it has a name, it's lvalue even declared as rvalue
   }

   X&& go();
   X obj = go(); // calling X(X && rhs) - it has no name, rvalue

std::move()
    turns argument into a rvalue even if it's not, by hiding name

    SubClass(SubClass && rhs)
        : Base(std::move(rhs) {
        }
